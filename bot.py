import os
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, FSInputFile
from aiogram.filters import Command
import asyncio
import logging

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv(dotenv_path=r"F:D:\Program Files (x86)\.env")
API_TOKEN = os.getenv('API_TOKEN')
ADMIN_IDS = os.getenv('ADMIN_IDS')
ADMIN_IDS = [int(x) for x in ADMIN_IDS.split(',')] if ADMIN_IDS else []

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
menu = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="–û –∫—É—Ä—Å–µ"),
            KeyboardButton(text="–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∫—É—Ä—Å–∞"),
        ],
        [
            KeyboardButton(text="–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã"),
            KeyboardButton(text="‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è"),
        ]
    ],
    resize_keyboard=True
)

@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∫—É—Ä—Å–∞ ¬´–ì–æ–≤–æ—Ä–∏—Ç—å –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ¬ª. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=menu)

@dp.message(F.text == "–û –∫—É—Ä—Å–µ")
async def about_course(message: types.Message):
    await message.answer_photo(
        photo="https://i.postimg.cc/T33tRJ1d/2.png",
        caption="–î–∞—Ç—ã –∫—É—Ä—Å–∞"
    )

@dp.message(F.text == "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∫—É—Ä—Å–∞")
async def course_program(message: types.Message):
    await message.answer_photo(
        photo="https://i.postimg.cc/dtBWPxqN/3.png",
        caption="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ"
    )

@dp.message(F.text == "–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
async def faq(message: types.Message):
    await message.answer_photo(
        photo="https://i.postimg.cc/7YDBRkyT/1.png",
        caption="–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã"
    )

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
user_data = {}

@dp.message(F.text == "‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è")
async def register_user(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:")
    user_data[message.from_user.id] = {"step": "name"}

@dp.message(lambda m: m.from_user.id in user_data)
async def process_registration(message: types.Message):
    uid = message.from_user.id
    step = user_data[uid]["step"]

    if step == "name":
        user_data[uid]["name"] = message.text
        user_data[uid]["step"] = "phone"
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +7...):")
    elif step == "phone":
        user_data[uid]["phone"] = message.text
        name = user_data[uid]["name"]
        phone = user_data[uid]["phone"]

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        for admin_id in ADMIN_IDS:
            await bot.send_message(
                admin_id,
                f"üì¢ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∫—É—Ä—Å:\n\n–ò–º—è: {name}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n–û—Ç @{message.from_user.username}"
            )
        await message.answer("–°–ø–∞—Å–∏–±–æ! –ú—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è üí¨", reply_markup=menu)
        del user_data[uid]

@dp.message()
async def unknown_message(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é.")

async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
